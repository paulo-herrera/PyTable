window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "tbl", "modulename": "tbl", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tbl.column", "modulename": "tbl.column", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tbl.column.Column", "modulename": "tbl.column", "qualname": "Column", "kind": "class", "doc": "<p>General container to store data as column of a table. \nConstructor should never be called from outside package.</p>\n"}, {"fullname": "tbl.column.Column.__init__", "modulename": "tbl.column", "qualname": "Column.__init__", "kind": "function", "doc": "<p>Creates a column with given name. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  name for this column.</li>\n<li><strong>desc:</strong>  description for this column [OPTIONAL]. </li>\n</ul>\n\n<p>NOTE: type of data stored in this column is undefined until data is added calling addData.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">desc</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "tbl.column.Column.name", "modulename": "tbl.column", "qualname": "Column.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "tbl.column.Column.data", "modulename": "tbl.column", "qualname": "Column.data", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "tbl.column.Column.type", "modulename": "tbl.column", "qualname": "Column.type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "tbl.column.Column.fmt", "modulename": "tbl.column", "qualname": "Column.fmt", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "tbl.column.Column.tostr", "modulename": "tbl.column", "qualname": "Column.tostr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "tbl.column.Column.attrs", "modulename": "tbl.column", "qualname": "Column.attrs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "tbl.column.Column.accum", "modulename": "tbl.column", "qualname": "Column.accum", "kind": "function", "doc": "<p>Applies function func to each element of column and saves result\nin list. Difference with reduce is that it produces a list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong>  function with signature: func(i, e, result) -> result</li>\n<li><strong>result:</strong>  initial value for result.</li>\n</ul>\n\n<h6 id=\"example\">Example:</h6>\n\n<blockquote>\n  <p>To calculate cummulative sum: cumsum = c.accum(func = lambda i, e, r: e + r)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"n\">result</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.addData", "modulename": "tbl.column", "qualname": "Column.addData", "kind": "function", "doc": "<p>Adds data to this column. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data:</strong>  list or tuple with data of this column.\nIf column already has data, then it is appended.\nType of data should match type of this column if already set.\nIt is possible to pass an empty list to create a column that\nis a placeholder. </li>\n<li><strong>ctype:</strong>  element of the same type of data stored in this column, e.g.\n1, 0.1, \"s\". Only used if self.type has not been assigned.\nIf not present, then type is inferred from the first element in data.\nThis option should be used in combination with an empty list,\nto create a column that is a placeholder for future data.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This column.</p>\n</blockquote>\n\n<p>NOTE: Only use this function to append list of many elements. To add \n      only one element use append instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">ctype</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.apply", "modulename": "tbl.column", "qualname": "Column.apply", "kind": "function", "doc": "<p>Creates a new list with elements e: \n    e[i] = func(i, c[i])</p>\n\n<p>Returns: \n    A new list of values</p>\n\n<p>NOTE: If you want to update elements in this column, use map instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.append", "modulename": "tbl.column", "qualname": "Column.append", "kind": "function", "doc": "<p>Appends element e to this column. \nReturns: This column.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">e</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.at", "modulename": "tbl.column", "qualname": "Column.at", "kind": "function", "doc": "<p>Given a list of indexes of elements in this columns, creates a new column.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>idxs:</strong>  list or tuple with indexes of elements in this column that</li>\n<li>should be in new column, e.g. list returned by indexes.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A new column with elements specified by idxs.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idxs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.clone", "modulename": "tbl.column", "qualname": "Column.clone", "kind": "function", "doc": "<p>Returns an exact copy that does not shared data with this column (deep-copy)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.collect", "modulename": "tbl.column", "qualname": "Column.collect", "kind": "function", "doc": "<p>Returns a list of the elements (c[i]) of this column that satisfy:\n   filter(i, c[i]) = True</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>New list of values.</p>\n</blockquote>\n\n<p>NOTE: If you want a new columns, use column instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">filter</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.convert", "modulename": "tbl.column", "qualname": "Column.convert", "kind": "function", "doc": "<p>Converts column data type from current type to new type.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>new:</strong>  new type as a one character string (see ttypes.ALLOWED_TYPES).\nOptional only if old type is string \"s\" (automatic conversion of strings). </li>\n<li><strong>fmt:</strong>  format used to convert dates to strings.\nIf present, then self.fmt is updated to fmt.      </li>\n<li><strong>default:</strong>  if present, used as default value for missing elements. \nIf column contains empty strings, then it is required to\nconvert column to float or int.                          </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This column.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fmt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.format", "modulename": "tbl.column", "qualname": "Column.format", "kind": "function", "doc": "<p>Returns a formatted string of element c[idx] in this column.\nFormat used to make conversion should have been set calling setFormatStr.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.head", "modulename": "tbl.column", "qualname": "Column.head", "kind": "function", "doc": "<p>Prints first n elements of this column.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n:</strong>  number of elements to print.</li>\n<li><strong>out:</strong>  a stream like object, e.g. sys.stdout.</li>\n<li><strong>sep:</strong>  a string used as separator of elements.</li>\n<li><strong>writeName:</strong>  if True, then write name of this column before writing elements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">out</span><span class=\"o\">=&lt;</span><span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">writeName</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.h", "modulename": "tbl.column", "qualname": "Column.h", "kind": "function", "doc": "<p>Similar to head but for command line use. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n:</strong>  number of elements to print.</li>\n<li><strong>out:</strong>  a stream like object, e.g. sys.stdout.</li>\n<li><strong>sep:</strong>  a string used as separator of elements.</li>\n<li><strong>writeName:</strong>  if True, then write name of this column before writing elements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">out</span><span class=\"o\">=&lt;</span><span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">writeName</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.indexes", "modulename": "tbl.column", "qualname": "Column.indexes", "kind": "function", "doc": "<p>Return a list of indexes of the elements of the column that satisfy:\nfilter(i, c[i]) = True</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">filter</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.isBlank", "modulename": "tbl.column", "qualname": "Column.isBlank", "kind": "function", "doc": "<p>Returns true if all elements in this column are blank or empty strings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.like", "modulename": "tbl.column", "qualname": "Column.like", "kind": "function", "doc": "<p>Set this table properties as other.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other:</strong>  table that has the properties to be copied.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.longStr", "modulename": "tbl.column", "qualname": "Column.longStr", "kind": "function", "doc": "<p>Returns a string that describes content in this column, that it includes\nattributes. For a shorter version, use __str__.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.np", "modulename": "tbl.column", "qualname": "Column.np", "kind": "function", "doc": "<p>Returns a Numpy array that contains data in this column.</p>\n\n<p>Returns: \n    A 1D Numpy array with data in this column. If Numpy is not installed,\n    then throws an error.</p>\n\n<p>NOTE: Data is not shared with the array, so changes made to the array are\n     not applied to this column and vice versa.\n     String length is restricted to ttypes.MAX_STRING_LEN_NUMPY (=100)</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.map", "modulename": "tbl.column", "qualname": "Column.map", "kind": "function", "doc": "<h6 id=\"updates-values-of-this-column-as\">Updates values of this column as:</h6>\n\n<blockquote>\n  <p>c[i] = func(i, c[i]) </p>\n</blockquote>\n\n<p>Args: \n    desc: If True save the string representation of func as description\n          of this column.</p>\n\n<p>Return: This column.</p>\n\n<p>NOTE: If want a new list of values, use apply instead.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.print", "modulename": "tbl.column", "qualname": "Column.print", "kind": "function", "doc": "<p>Write elements of column to out.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>out:</strong>  a stream like object, e.g. sys.stdout.</li>\n<li><strong>sep:</strong>  a string used as separator of elements.</li>\n<li><strong>fmt:</strong>  string that defines format to be used to convert values to strings \n[OPTIONAL, USED FOR FLOATS AND DATES].</li>\n<li><strong>writeName:</strong>  if True, then write name of this column before writing elements.</li>\n<li><strong>start:</strong>  index of first element that should be printed \n[OPTIONAL, DEFAULT = 0]</li>\n<li><strong>end:</strong>  index of last element that should be printed \n[OPTIONAL, DEFAULT=NONE, last element]</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">out</span><span class=\"o\">=&lt;</span><span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">writeName</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">end</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.reduce", "modulename": "tbl.column", "qualname": "Column.reduce", "kind": "function", "doc": "<p>Applies func on each element of this column and returns the final result.\nFor example, to compute the minimum value of a column:\n   c.reduce(func = lambda (i, e, result): e if e &lt; result else result, result = BIG_NUMBER)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong>  func(i, e, result), where i is the index of element e and \nresult is the intial or temporal value of the result. </li>\n<li><strong>result:</strong>  initial result. </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The final result of calling func over all elements of this column.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"n\">result</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.remove", "modulename": "tbl.column", "qualname": "Column.remove", "kind": "function", "doc": "<p>Removes elements (e[i]) of this column that satisfy: \n        filter(i, e[i]) = True</p>\n\n<p>Returns: This column after removing elements.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">filter</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.setAttr", "modulename": "tbl.column", "qualname": "Column.setAttr", "kind": "function", "doc": "<p>Sets attribute for this column.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  attribute name.</li>\n<li><strong>value:</strong>  attribute value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This table</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.setFormatStr", "modulename": "tbl.column", "qualname": "Column.setFormatStr", "kind": "function", "doc": "<p>Sets format used to print or convert elements in this column to strings.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This column.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">fmt</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.select", "modulename": "tbl.column", "qualname": "Column.select", "kind": "function", "doc": "<h6 id=\"creates-a-new-column-taking-only-the-elements-of-this-column-that-satisfy\">Creates a new column taking only the elements of this column that satisfy:</h6>\n\n<blockquote>\n  <p>filter(i, c[i]) = True</p>\n</blockquote>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  If present, then it is used as name of new column. \nOtherwise, name of new column is created as a combination\nof the name of this column and the filter.</li>\n<li><strong>desc:</strong>  If present used as descriptor for new column. If not present,\nthen a string representation of the filter is used as descriptor.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A new column with selected elements of this column.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">filter</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.setName", "modulename": "tbl.column", "qualname": "Column.setName", "kind": "function", "doc": "<p>Sets name of this column.\nReturns: This column.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.stats", "modulename": "tbl.column", "qualname": "Column.stats", "kind": "function", "doc": "<p>Returns a tuple with statistics of this column, e.g. min, max, sum, mean, stddev, nvalues.</p>\n\n<p>NOTE: Only implemented for columns of floats.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>verbose:</strong>  if True print statistics to out.</li>\n<li><strong>out:</strong>  stream like object where information should be printed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Tuple with (nvalues, min, max, mean, stddev)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=&lt;</span><span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.store", "modulename": "tbl.column", "qualname": "Column.store", "kind": "function", "doc": "<p>Applies function func with signature func(i, e, data) -> result\nand store result in a list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>func:</strong>  function that accepts as argument index i, element e and list of\ndata stored in this column and return a value.</li>\n<li><strong>start:</strong>  start the loop at this position. Can be useful to compute quantities \n     between two data elementes separted by more than 1.\nend: if present, specifies upper limit for loop. If not present\n     then use len(self.data). Can be useful to compute quantities \n     between two data elementes separted by more than 1.                </li>\n</ul>\n\n<p>Example: To mark outliers in a column, assuming that outliers differ by more than \n         a specified tolerance TOL from the previous value.</p>\n\n<pre><code>    c.store(func = lambda i, e, data: abs(e - data[i-1]) &gt; TOL if (i &gt; 0) else False)\n\nTo find the index of the outlier in the column, use:\n    idx = [i for i, e in enumerate(r) if e]\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">func</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">end</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.tail", "modulename": "tbl.column", "qualname": "Column.tail", "kind": "function", "doc": "<p>Prints last n elements of this column.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n:</strong>  number of elements to print.</li>\n<li><strong>out:</strong>  a stream like object, e.g. sys.stdout.</li>\n<li><strong>sep:</strong>  a string used as separator of elements.</li>\n<li><strong>writeName:</strong>  if True, then write name of this column before writing elements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">out</span><span class=\"o\">=&lt;</span><span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">writeName</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.t", "modulename": "tbl.column", "qualname": "Column.t", "kind": "function", "doc": "<p>Similar to tail for command line use.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n:</strong>  number of elements to print.</li>\n<li><strong>out:</strong>  a stream like object, e.g. sys.stdout.</li>\n<li><strong>sep:</strong>  a string used as separator of elements.</li>\n<li><strong>writeName:</strong>  if True, then write name of this column before writing elements.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">n</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">out</span><span class=\"o\">=&lt;</span><span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"se\">\\n</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">writeName</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.column.Column.telap", "modulename": "tbl.column", "qualname": "Column.telap", "kind": "function", "doc": "<p>Returns a column that contains elapsed time in days since start date,\nassuming that this column contains dates as datetime objects.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>start:</strong>  reference date as string, e.g. \"01/01/1970 00:00:00\"</li>\n<li><strong>fmt_date:</strong>  string that specifies format to read starting date.</li>\n<li><strong>verbose:</strong>  if True, prints some information to sys.stdout.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A new column with elapsed time names \"telap_XXXX\", \n  where XXXX=reference date formated as d_m_Y__H_M_S.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">fmt_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/%m/%Y %H:%M:%S&#39;</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.helpers", "modulename": "tbl.helpers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tbl.helpers.report_missing", "modulename": "tbl.helpers", "qualname": "report_missing", "kind": "function", "doc": "<p>Given a list of dates that are supposed to be equispaced, report potential \nmissing records.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dates:</strong>  list of datetime objects.</li>\n<li><strong>interval:</strong>  normal spacing between records as datetime.timedelta.</li>\n<li><strong>verbose:</strong>  print additional information to sys.stdout</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of potential missing records as [(date1, date2), ....].\u00b4</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dates</span>, </span><span class=\"param\"><span class=\"n\">interval</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.helpers.get_date", "modulename": "tbl.helpers", "qualname": "get_date", "kind": "function", "doc": "<p>Creates a date from a string representation.\nJust a shortcut to save a couple of lines.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sdate:</strong>  string that represents a date, e.g. \"01/01/1970 00:00:00\"</li>\n<li><strong>fmt:</strong>  string that specifies the format to read a date.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A datetime object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sdate</span>, </span><span class=\"param\"><span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/%m/%Y %H:%M:%S&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.helpers.break_date", "modulename": "tbl.helpers", "qualname": "break_date", "kind": "function", "doc": "<p>Given a date as a string returns 6 integers. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sdate:</strong>  dates as string.  It assumes a common format, e.g.\n'day/month/year hour:minute:second', however separators can be \nmodified by passing different arguments. If hour is not present\nthen it assumes '00:00:00'.\nIf minutes or seconds are missing, then it assume they are 00.\nIt expects that dates are given in international format, with\nday before month and month before year. Adjust accordingly if \nnot the case.</li>\n<li><strong>dsep:</strong>  separator between day, month, year     [OPTIONAL, DEFAULT = /]</li>\n<li><strong>hsep:</strong>  separator between hour, minute, second [OPTIONAL, DEFAULT = :]</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>6 integers: day, month, year, hour, minute, second.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sdate</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">dsep</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;/&#39;</span>, </span><span class=\"param\"><span class=\"n\">hsep</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;:&#39;</span>, </span><span class=\"param\"><span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39; &#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.helpers.datetime_list", "modulename": "tbl.helpers", "qualname": "datetime_list", "kind": "function", "doc": "<p>Returns a list of datetimes between two years.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>year0:</strong>  initial year as int, e.g. 1970.</li>\n<li><strong>year1:</strong>  final year as int, e.g. 1980.</li>\n<li><strong>monthy:</strong>  If True, then include the first day of each month.</li>\n<li><strong>verbose:</strong>  if True, print list of dates.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of datetime objects between both years.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">year0</span>, </span><span class=\"param\"><span class=\"n\">year1</span>, </span><span class=\"param\"><span class=\"n\">monthly</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.helpers.elapsed_time", "modulename": "tbl.helpers", "qualname": "elapsed_time", "kind": "function", "doc": "<p>Given a list of dates as datetime, returned a list of elapsed times in days\nsince start.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dates:</strong>  list of dates as datetime objects.</li>\n<li><strong>start:</strong>  string that specifies initial date.</li>\n<li><strong>fmt_date:</strong>  format that must be used to parse start string. [OPTIONAL]</li>\n<li><strong>verbose:</strong>  if True, print some additional information.</li>\n<li><strong>verbose2:</strong>  if True, print more additional information (list of dates and times).</li>\n<li>scale = internally results are computed as seconds, but they are divided by this \nparameter before they are returned. For example, if scale = 86400, then\nreturned elapsed times is in days. Set to 1 to obtain elapsed time in seconds.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list of elapsed times as dates and starting date as a datetime object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dates</span>,</span><span class=\"param\">\t<span class=\"n\">start</span>,</span><span class=\"param\">\t<span class=\"n\">fmt_date</span><span class=\"o\">=</span><span class=\"s1\">&#39;</span><span class=\"si\">%d</span><span class=\"s1\">/%m/%Y %H:%M:%S&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">86400.0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose2</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.helpers.is_iterable", "modulename": "tbl.helpers", "qualname": "is_iterable", "kind": "function", "doc": "<p>Returns true if obj is a tuple, list or dictionary so it can be iterated.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.helpers.process_text", "modulename": "tbl.helpers", "qualname": "process_text", "kind": "function", "doc": "<p>Basic text processing function: \n    Read all lines in file src, and pass it to function do, which returns \n    a modified list of lines that are printed to out.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>src:</strong>  path to file.</li>\n<li><strong>do:</strong>  function (list[str] -> list[str])</li>\n<li><strong>out:</strong>  stream-like object to print resulting lines.</li>\n<li><strong>encoding:</strong>  string that defines encoding of file.</li>\n<li><strong>original:</strong>  if True, then print original before printing modified lines.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">do</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=&lt;</span><span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>, </span><span class=\"param\"><span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span>, </span><span class=\"param\"><span class=\"n\">original</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.helpers.read_tab_file", "modulename": "tbl.helpers", "qualname": "read_tab_file", "kind": "function", "doc": "<p>Reads data from a text file that has tabular format, i.e. columns of data\nare separated by a string.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>src:</strong>  path to file that should be read.</li>\n<li><strong>sep:</strong>  String used as column separator. All lines in the file should have\nthe same number of separators.</li>\n<li><strong>strip:</strong>  if True, then strip blank space from strings.</li>\n<li><strong>verbose:</strong>  if True, print some information. </li>\n<li><strong>encoding:</strong>  encoding of the file.</li>\n<li><strong>skip:</strong>  number of lines to be skipped at the beginning of file.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of list of values in the file as strings. Each line in the file,\n  corresponds to a list of values. It also returns list of skipped lines.\n  return (values, skipped)</p>\n</blockquote>\n\n<p>NOTE: All content of the file is read at once, which should be ok for most files\n     that are smaller than available memory. </p>\n\n<p>TODO: Skip , in literal strings surrounded with \"\n      Check codec/decode of UTF-8 with f.readlines(), it fails for Spanish characters</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sep</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">strip</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">skip</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.helpers.split_line", "modulename": "tbl.helpers", "qualname": "split_line", "kind": "function", "doc": "<p>Split a line using sep as separator. \nBlank space at beginning and end are removed before splitting.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>l:</strong>  line as a string.</li>\n<li><strong>sep:</strong>  separator as a string.</li>\n<li><strong>strip:</strong>  if True, then additionally strip blank space from substrings.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">l</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sep</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">strip</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tbl.helpers.timeit", "modulename": "tbl.helpers", "qualname": "timeit", "kind": "function", "doc": "<p>Time the execution time of function f. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>f:</strong>  callable.</li>\n<li><strong>verbose:</strong>  if True, prints results.</li>\n<li><strong>source:</strong>  if True, print source</li>\n</ul>\n\n<p>Returns: \n    Time in seconds.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">f</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.helpers.touchit", "modulename": "tbl.helpers", "qualname": "touchit", "kind": "function", "doc": "<p>Replace each appearance of old string in file src by new string specified in the list replace. </p>\n\n<p>This is useful when a file needs some touches before it \ncan imported into a Table, e.g. replace \",\" by a \".\" as decimal\nseparator. It also allows changing the encoding of a text file.</p>\n\n<p>It is a very simple version of what is provided by grep or similar programs.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>src:</strong>  full path to source file.</li>\n<li><strong>replace:</strong>  a list of (old,new) regexes that must be substituted.\nReplacement is performed one by one in the given order of pairs.</li>\n<li><strong>dst:</strong>  if present, then new file is writen to this path.\nIf not present (default), existing file is overwritten.</li>\n<li><strong>verbose:</strong>  if True, then prints some information to standard output.</li>\n<li><strong>src_encoding:</strong>  file encoding for source file as accepted by Python open function, e.g. utf-8.</li>\n<li><strong>dst_encoding:</strong>  file encoding for destination file as accepted by Python open function, e.g. ascii.\nFor details, see <a href=\"https://docs.python.org/3/library/codecs.html#module-codecs\">https://docs.python.org/3/library/codecs.html#module-codecs</a></li>\n<li><strong>test:</strong>  if True, then print resulting text to standard output. </li>\n</ul>\n\n<p>NOTE: All content of the file is read in memory to make the process faster. \n      And the replacement is done all at once by calling replace(old, new).</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span>,</span><span class=\"param\">\t<span class=\"n\">replace</span>,</span><span class=\"param\">\t<span class=\"n\">dst</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">src_encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dst_encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">test</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">debug</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.helpers.walker", "modulename": "tbl.helpers", "qualname": "walker", "kind": "function", "doc": "<p>Returns a list of full path to all files in root directory and subdirectories.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fpath:</strong>  path to root directory.</li>\n<li><strong>ffilter:</strong>  function used to check filenames, if ffilter(fpath) = True, then\nfile is included in the returned list. fpath is path to file \nincluding directories.</li>\n<li><strong>verbose:</strong>  if True, prints output while visit the directory tree.</li>\n<li><strong>level:</strong>  directory level, passed as argument to call function recursively.\nDefault value should not be changed when call directly.</li>\n<li><strong>lfiles:</strong>  list of files, passed as argument to call function recursively.\nDefault value should not be changed when call directly.</li>\n<li>absPath = if True, then include absolute path in list. If False, then\nincludes relative path.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>List of full path to files in directory.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">fpath</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">ffilter</span><span class=\"o\">=&lt;</span><span class=\"n\">function</span> <span class=\"o\">&lt;</span><span class=\"k\">lambda</span><span class=\"o\">&gt;&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">lfiles</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">absPath</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.helpers.dict_from_txt", "modulename": "tbl.helpers", "qualname": "dict_from_txt", "kind": "function", "doc": "<p>Reads a dictionary {key:value} from text file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>src:</strong>  path to text file.</li>\n<li><strong>sep:</strong>  separartor between key, value pair.</li>\n<li><strong>converter:</strong>  if present, use it to convert values from strings.</li>\n<li><strong>verbose:</strong>  if True, prints some information to stdout.</li>\n<li><strong>skip:</strong>  skip this number of lineas before reading values.</li>\n<li><strong>encoding:</strong>  use this encoding to read the content of the file.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span>,</span><span class=\"param\">\t<span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;,&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">converter</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">skip</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">&#39;utf-8&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.helpers.file_hash", "modulename": "tbl.helpers", "qualname": "file_hash", "kind": "function", "doc": "<p>Compute the SHA1 hash of a file, \nwhich can be useful to check for corrupt or modified files later on.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>src:</strong>  path to file.</li>\n<li><strong>method:</strong>  sha1 or md5.</li>\n<li><strong>verbose:</strong>  if True, prints some information to sys.stdout</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>hexdigest.</p>\n</blockquote>\n\n<p>REF: <a href=\"https://stackoverflow.com/a/22058673\">https://stackoverflow.com/a/22058673</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;sha1&#39;</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.math", "modulename": "tbl.math", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tbl.math.moving_average", "modulename": "tbl.math", "qualname": "moving_average", "kind": "function", "doc": "<p>Computes the moving average of values using a window of size 2k+1 around \neach element of a.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>a:</strong>  Column of floating point values.</li>\n<li><strong>k:</strong>  integer that specifies the half window to compute the moving average.\nFor element i computes the mean = mean(a(i-k:i+k)).</li>\n<li><strong>printeach:</strong>  print some information each printeach values are processed.\nUseful for debugging when call takes too long.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A Column of the same size as a with first k and last k elements marked\n  as NaN and the rest equal to the 2k + 1 moving average around a[i] for each\n  element e[i].</p>\n</blockquote>\n\n<p>NOTE: Pure Python version. Runs reasonably well for small input arrays.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">k</span><span class=\"p\">:</span> <span class=\"nb\">int</span>, </span><span class=\"param\"><span class=\"n\">printeach</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.plot", "modulename": "tbl.plot", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tbl.plot.plotxy", "modulename": "tbl.plot", "qualname": "plotxy", "kind": "function", "doc": "<p>Plots ycols vs xcols. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>t:</strong>  Table.</li>\n<li><strong>xcols:</strong>  list of columns, e.g. [0,1,2] or [\"col1\", \"col2\"], that specifies list to be used as x-data.\nIf len(xcols) == 1, then all ycols are plotted against a single column. \nIf len(xcols) &gt; 1, then it must satisfy len(xcols) == len(ycols).</li>\n<li><strong>ycols:</strong>  list of columns, e.g. [0,1,2] or [\"col1\", \"col2\"], that specifies list to be used as y-data.</li>\n<li><strong>fmt:</strong>  list with strings that specify format to be used for lines and symbols.\nIf len(fmt) == 1, then use the same format for all series.\nIf len(fmt) &gt; 1, then it must satisfy len(fmt) == len(ycols)</li>\n<li><strong>labels:</strong>  labels to be used as titles for axes. It should satisfy len(labels) == 2.\nPass labels = [None, None] to not add labels.\nDEFAULT = [\"x\",\"y\"].</li>\n<li><strong>legend:</strong>  if True include legend.</li>\n<li><strong>newfig:</strong>  If True, creates a new figure.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Reference to matplotlib.pyplot that can be used to:</p>\n  \n  <ul>\n  <li>show figure, plt.show()</li>\n  <li>save figure, plt.savefig(), etc.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">t</span>,</span><span class=\"param\">\t<span class=\"n\">xcols</span>,</span><span class=\"param\">\t<span class=\"n\">ycols</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;y&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">newfig</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.required", "modulename": "tbl.required", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tbl.required.report", "modulename": "tbl.required", "qualname": "report", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table", "modulename": "tbl.table", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tbl.table.Table", "modulename": "tbl.table", "qualname": "Table", "kind": "class", "doc": "<p>Class to store a table as a collection of Columns.</p>\n"}, {"fullname": "tbl.table.Table.__init__", "modulename": "tbl.table", "qualname": "Table.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">name</span></span>)</span>"}, {"fullname": "tbl.table.Table.name", "modulename": "tbl.table", "qualname": "Table.name", "kind": "variable", "doc": "<p>Name for this table. It can be accessed for reading/writing directly, e.g.</p>\n\n<pre><code>    t.name = \"TheTable\"\n    tn = t.name\n</code></pre>\n"}, {"fullname": "tbl.table.Table.cols", "modulename": "tbl.table", "qualname": "Table.cols", "kind": "variable", "doc": "<p>List of columns in this table. It should be safe to access it directly for reading.</p>\n"}, {"fullname": "tbl.table.Table.max_rows", "modulename": "tbl.table", "qualname": "Table.max_rows", "kind": "variable", "doc": "<p>Max. number of rows in this table.</p>\n"}, {"fullname": "tbl.table.Table.desc", "modulename": "tbl.table", "qualname": "Table.desc", "kind": "variable", "doc": "<p>Additional description that may be useful to identify data, e.g. origin, source, etc.</p>\n"}, {"fullname": "tbl.table.Table.add", "modulename": "tbl.table", "qualname": "Table.add", "kind": "function", "doc": "<p>Adds a column to this table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  column id. If not passed, then column is assigned a generic id,\ne.g col1</li>\n<li><strong>data:</strong>  a list of data or Column to be added as data to the new column. </li>\n<li><strong>allowRepetition:</strong>  if True, columns with similar name can be stored in this table.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">allowRepetition</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.all", "modulename": "tbl.table", "qualname": "Table.all", "kind": "function", "doc": "<p>Returns:\nA list with the index position of all columns in this Table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.append", "modulename": "tbl.table", "qualname": "Table.append", "kind": "function", "doc": "<p>Appends columns of other table to <em>this</em> table, \ni.e. makes the columns of this table longer by appending data \nfrom the other table.\nBoth tables must have the same number of columns.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>other:</strong>  Table to append to this table.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This table with appended values.</p>\n</blockquote>\n\n<p><strong>Note:</strong> If you need to get a new table by merging this and other, \n          clone this table first and then append other.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">other</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.at", "modulename": "tbl.table", "qualname": "Table.at", "kind": "function", "doc": "<p>Returns a list of columns given a list of key (strings or ints).\nSimilar to table[key] but for list of keys.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>keys:</strong>  list of int or strings that specifiy columns in the table.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list of columns.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">tbl</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.clone", "modulename": "tbl.table", "qualname": "Table.clone", "kind": "function", "doc": "<p>Creates a shallow or deep copy of this table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>shallow:</strong>  if True, only pass references to columns in this table to new\ntable. If False, then creates a deep copy, so that this table\nand new table do not share information.</li>\n<li><strong>newName:</strong>  if present, then use it as title of new table.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>New table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">shallow</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">newName</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.fromH5", "modulename": "tbl.table", "qualname": "Table.fromH5", "kind": "function", "doc": "<p>Reads table from HDF5 file saved by calling toH5 or with a similar format.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>root:</strong> </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Read table and full path to file, (t, f).</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">src</span>, </span><span class=\"param\"><span class=\"n\">root</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.has", "modulename": "tbl.table", "qualname": "Table.has", "kind": "function", "doc": "<p>Given a key returns True if it is in list of columns. </p>\n\n<p>NOTE: keys are compared always as lower case. Thus, \n     \"Duck\" == \"duck\" == \"DUCK\"</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key:</strong>  an integer number or a name. \nIt should be faster to call with key as an integer.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True or false.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.head", "modulename": "tbl.table", "qualname": "Table.head", "kind": "function", "doc": "<p>Prints first n rows with default formatting. Same can be achieved with print,\nbut calling head may be self-explanatory.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n:</strong>  number of rows to print.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.h", "modulename": "tbl.table", "qualname": "Table.h", "kind": "function", "doc": "<p>Similar to head for command line use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.index", "modulename": "tbl.table", "qualname": "Table.index", "kind": "function", "doc": "<p>Given a list of column ids, returns a list with their positions in the table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>names:</strong>  list of column ids.</li>\n<li><strong>verbose:</strong>  if True, prints a warning if name is not in Table.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list with positions of specified columns.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">names</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.isSquare", "modulename": "tbl.table", "qualname": "Table.isSquare", "kind": "function", "doc": "<p>Returns True if all columns have the same number of elements.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.names", "modulename": "tbl.table", "qualname": "Table.names", "kind": "function", "doc": "<p>Returns a list with ids (names) of columns in this table. Depending on\ncase, names are returned as lower, upper or a mix of lower and upper case.</p>\n\n<p>Args: \n    case: L (lower), U (upper) or M (mix lower and upper) [DEFAULT = M]</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">case</span><span class=\"o\">=</span><span class=\"s1\">&#39;M&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.ncols", "modulename": "tbl.table", "qualname": "Table.ncols", "kind": "function", "doc": "<p>Returns the number of columns in this Table. Similar to __len__.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.nrows", "modulename": "tbl.table", "qualname": "Table.nrows", "kind": "function", "doc": "<p>Returns the maximum number of rows in this Table.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.setFormatStr", "modulename": "tbl.table", "qualname": "Table.setFormatStr", "kind": "function", "doc": "<p>Sets format used to convert to string or print elements of columns in \nthis table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fmt_int:</strong>  format used to convert ints.</li>\n<li><strong>fmt_float:</strong>  format used to convert floats.</li>\n<li><strong>fmt_date:</strong>  format used to convert dates.</li>\n<li><strong>fmt_string:</strong>  format used to print strings.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This Table.</p>\n</blockquote>\n\n<p>NOTE: It is also possible to set the format of individual columns by calling\n      col.setFormatStr(fmt).\n      Formats are only used to convert TO string, not to convert FROM STRING.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">fmt_int</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">fmt_float</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">fmt_date</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">fmt_str</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.convert", "modulename": "tbl.table", "qualname": "Table.convert", "kind": "function", "doc": "<p>Attempt to convert each column of this table to the specified type provided in the list fmt.</p>\n\n<pre><code>Args:\n    cols: list with columns indexes that should be converted. \u00e7\n          if empty, assumes all columns in the table should be converted.\n    types: a list with single characters that specify the new type of each column, \n         i.e.[\"i\", \"f\", \"d\", \"s\"].\n         If shorter than cols, then the last element is repeated.\n    fmt_date: format used to convert strings to datetime objects.\n              Only needed if converting to dates.\nReturns:\n    This Table.\n</code></pre>\n\n<p>#</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cols</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">types</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>, </span><span class=\"param\"><span class=\"n\">fmt_date</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.print", "modulename": "tbl.table", "qualname": "Table.print", "kind": "function", "doc": "<p>Prints each elements in columns of this table in tabular format. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>maxRows:</strong>  maximum number of rows to be printed. \nIf &lt;0, then all rows are printed.</li>\n<li><strong>writeTitle:</strong>  If true, prints name of table.</li>\n<li><strong>out:</strong>  stream where data should be printed.</li>\n<li><strong>sep:</strong>  string used as separator between columns.</li>\n<li><strong>columnWidth:</strong>  default width used to print columns. \nThere is no guarantee that the formats used to print\nelements of column fit withing this width.                              </li>\n<li><strong>missing:</strong>  string used to represent missing values in table. DEFAULT: \"-\"</li>\n<li><strong>verbose:</strong>  if True, then prints some additional information to sys.stdout.</li>\n<li><strong>start:</strong>  start printing at this row.</li>\n<li><strong>lineBelow:</strong>  if True, prints a line below column headers.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Stream where data was printed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">maxRows</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">writeTitle</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">out</span><span class=\"o\">=&lt;</span><span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">sep</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;</span><span class=\"se\">\\t</span><span class=\"s1\">&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">columnWidth</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">missing</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;-&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">lineBelow</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.plotxy", "modulename": "tbl.table", "qualname": "Table.plotxy", "kind": "function", "doc": "<p>Plots ycols vs xcols. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>xcols:</strong>  list of columns, e.g. [0,1,2] or [\"col1\", \"col2\"], that specifies list to be used as x-data.\nIf len(xcols) == 1, then all ycols are plotted against a single column. \nIf len(xcols) &gt; 1, then it must satisfy len(xcols) == len(ycols).</li>\n<li><strong>ycols:</strong>  list of columns, e.g. [0,1,2] or [\"col1\", \"col2\"], that specifies list to be used as y-data.\nif ycols = [-1], then it will plot columns [1:] in the table </li>\n<li><strong>fmt:</strong>  list with strings that specify format to be used for lines and symbols.\nIf len(fmt) == 1, then use the same format for all series.\nIf len(fmt) &gt; 1, then it must satisfy len(fmt) == len(ycols)</li>\n<li><strong>labels:</strong>  labels to be used as titles for axes. It should satisfy len(labels) == 2.\nDEFAULT = [\"x\",\"y\"].</li>\n<li><strong>legend:</strong>  if True include legend [DEFAULT=True].</li>\n<li><strong>new:</strong>  If True, creates a new figure [DEFAULT=True].</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Reference to matplotlib.pyplot that can be used to:</p>\n  \n  <ul>\n  <li>show figure, plt.show()</li>\n  <li>save figure, plt.savefig(), etc.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">xcols</span>,</span><span class=\"param\">\t<span class=\"n\">ycols</span>,</span><span class=\"param\">\t<span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">&#39;x&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;y&#39;</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">fmt</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">legend</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">new</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.pop", "modulename": "tbl.table", "qualname": "Table.pop", "kind": "function", "doc": "<p>Removes column specified by key.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key:</strong>  int or string that specifies column.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Removed column or None if key is not in this table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.rename", "modulename": "tbl.table", "qualname": "Table.rename", "kind": "function", "doc": "<p>Rename columns.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>map_ids:</strong>  dictionary {old_id: new_id}</li>\n<li>if old_id is not present in this dictionary throw a warning.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">map_ids</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.remove", "modulename": "tbl.table", "qualname": "Table.remove", "kind": "function", "doc": "<p>Removes columns specified by list of keys</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>keys:</strong>  List of ints or strings that specify columns that should be removed.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">keys</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.read", "modulename": "tbl.table", "qualname": "Table.read", "kind": "function", "doc": "<p>Reads table from file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>src:</strong>  path to file.</li>\n<li><strong>sep:</strong>  string that separates columns as a regex, e.g. \\w for white space. </li>\n<li><strong>header:</strong>  line number that contains header (0 or 1, DEFAULT = 1). </li>\n<li><strong>removeEmptyColumn:</strong>  if True, check and removed columns that only have empty strings.\nneeded for ill-formed files. [DEFAULT=False]\nFor large tables, it may be faster to import them, \nand remove specific columns later.</li>\n<li><strong>verbose:</strong>  if True, prints some additional information.</li>\n<li><strong>encoding:</strong>  string that indicates file encoding.</li>\n<li><strong>allowRepetition:</strong>  if True, allows columns with same header id.</li>\n<li><strong>skip:</strong>  number of lines at beginning of file that should be skipped, \ne.g. comment lines [DEFAULT = 0]. </li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A new table with data read from file and a list with skipped lines.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">src</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">sep</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;,&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">header</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">removeEmptyColumn</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">encoding</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;utf-8&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">allowRepetition</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">skip</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.row", "modulename": "tbl.table", "qualname": "Table.row", "kind": "function", "doc": "<p>Returns a list with elements at position idx (row) in all columns of this Table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>idx:</strong>  int that specifies position in each column (row).</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Row at position idx.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.rows", "modulename": "tbl.table", "qualname": "Table.rows", "kind": "function", "doc": "<p>Returns a list with elements of all columns that are at positions in idx_rows.\nElements of each column are stored in a tuple within the returned list.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>idx_rows:</strong>  list of rows as ints, e.g. [0,1,2,3].</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A list with elements of all columns. If n is higher that len(c),\n  then the tuple includes None.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">idx_rows</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.save", "modulename": "tbl.table", "qualname": "Table.save", "kind": "function", "doc": "<p>Saves this Table to a file. Similar to print, but with default values.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dst:</strong>  path to destination file.</li>\n<li><strong>sep:</strong>  string used as separator between columns.</li>\n<li><strong>columnWidth:</strong>  default width used to print columns. \nThere is no guarantee that the formats used to print\nelements of column fit withing this width.                              </li>\n<li><strong>missing:</strong>  string used to represent missing values in table. DEFAULT: \"-\"</li>\n<li><strong>verbose:</strong>  if True, then prints some additional information to sys.stdout.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dst</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">sep</span><span class=\"o\">=</span><span class=\"s1\">&#39;,&#39;</span>, </span><span class=\"param\"><span class=\"n\">columnWidth</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">missing</span><span class=\"o\">=</span><span class=\"s1\">&#39;-&#39;</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.select", "modulename": "tbl.table", "qualname": "Table.select", "kind": "function", "doc": "<p>Returns a new table with columns that satisfy the filter criteria.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filter:</strong>  function with signature filter(pos, name) -> (True or False)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A new table that contains the columns of this table for which filter == True.</p>\n</blockquote>\n\n<p>NOTE: Both tables share the same columns, so changes apply to one table \n      are also propagated to the other one.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"nb\">filter</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"nb\">bool</span><span class=\"p\">]</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.addID", "modulename": "tbl.table", "qualname": "Table.addID", "kind": "function", "doc": "<p>Adds a first column with a unique identifier (default: row number) for each row (record) in \nthis Table. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>gen:</strong>  id generator, gen(row) -> id. Default: None, so id = row number.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gen</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.setName", "modulename": "tbl.table", "qualname": "Table.setName", "kind": "function", "doc": "<p>Sets name (title) of this table. Allows chaining calls.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name:</strong>  new name for this table.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This table</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.sort", "modulename": "tbl.table", "qualname": "Table.sort", "kind": "function", "doc": "<p>Sort rows of table according to key in ascending order.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>key:</strong>  function that takes a row of the column and returns a single value, e.g.\nkey (row) -> row[0]</li>\n<li><strong>reverse:</strong>  if True, sort table in descending order.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This table with rows sorted by key.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span>, </span><span class=\"param\"><span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.tail", "modulename": "tbl.table", "qualname": "Table.tail", "kind": "function", "doc": "<p>Prints last n rows with default formatting.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>n:</strong>  number of rows to print.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.t", "modulename": "tbl.table", "qualname": "Table.t", "kind": "function", "doc": "<p>Similar to tail for command line use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.toH5", "modulename": "tbl.table", "qualname": "Table.toH5", "kind": "function", "doc": "<p>Saves table to HDF5 file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dst:</strong>  path to HDF5 file. Recommended extension to be .h5, \nbut not enforce it. </li>\n<li><strong>root:</strong>  string used as root of the group that contains the table in the \nHDF5 file [DEFAULT = \"/\"].</li>\n<li><strong>append:</strong>  if True, append table to existing file.</li>\n<li><strong>compress:</strong>  save data in compressed format (gzip supported by HDF5).\nUseful for big files.</li>\n<li><strong>verbose:</strong>  if True, print some warnings and additional information \nto sys.stdout.</li>\n<li><strong>fmt_date:</strong>  format used to convert dates to strings.\nOnly needed if there is a single column of type \"d\". </li>\n</ul>\n\n<p>Return: \n    Full path to saved HDF5 file.</p>\n\n<p>NOTE: Dates are converted to string using default format specified in setFormatStr.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">dst</span>,</span><span class=\"param\">\t<span class=\"n\">root</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">append</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">compress</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">fmt_date</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.table", "modulename": "tbl.table", "qualname": "Table.table", "kind": "function", "doc": "<p>Creates a table with rows specified in the list idx_rows.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>args:</strong>  a single or multiples lists of indices of rows that should \nbe included in the new table. \nSame as returned by Column.indexes and accepted by rows.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <ul>\n  <li>A New table that is a subtable of this table with rows specified by a single list\n  of indexes in args or by the intersection of multiple lists in args.</li>\n  <li>And the list of indexes used to generate the subtable.</li>\n  </ul>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">*</span><span class=\"n\">args</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.transpose", "modulename": "tbl.table", "qualname": "Table.transpose", "kind": "function", "doc": "<p>Creates a table that is the transpose of this table, i.e.\nfirst column in new table is the header row\nand columns &gt;=2 are equal to the rows 1..n of the old table.</p>\n\n<p>All data is copied to the new table.\nTo make columns consistant, all columns are first converted to strings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.uniques", "modulename": "tbl.table", "qualname": "Table.uniques", "kind": "function", "doc": "<p>Generates a new table by removing columns that have the same name.\nOnly first column with a given name is preserved.\nData in columns included in new table is NOT copied.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a new table with columns that have different names.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.wait", "modulename": "tbl.table", "qualname": "Table.wait", "kind": "function", "doc": "<p>Wait for user input before continuing.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.w", "modulename": "tbl.table", "qualname": "Table.w", "kind": "function", "doc": "<p>Similar to wait for command line use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.what", "modulename": "tbl.table", "qualname": "Table.what", "kind": "function", "doc": "<p>Prints a summary of (what is in) this table including name and information about \neach column such as: name, type and number of rows.</p>\n\n<p>Args: \n    out: stream-like object.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>This table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=&lt;</span><span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.wh", "modulename": "tbl.table", "qualname": "Table.wh", "kind": "function", "doc": "<p>Similar to what for command line use.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">out</span><span class=\"o\">=&lt;</span><span class=\"n\">_io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.zip", "modulename": "tbl.table", "qualname": "Table.zip", "kind": "function", "doc": "<p>Returns a list of tuples.</p>\n\n<p>The element r of the returned list corresponds to the tuple:\n(cols[0][r], cols[1][r], ...., cols[n][r]) </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cols:</strong>  list of ints or strings.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a list of tuples.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cols</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]]</span></span><span class=\"return-annotation\">) -> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]]</span>:</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.__contains__", "modulename": "tbl.table", "qualname": "Table.__contains__", "kind": "function", "doc": "<p>Returns true if column c is in this table.\nThis allows,</p>\n\n<pre><code>    \"Column1\" in t\n</code></pre>\n\n<p>Similar to t.has(\"Column1\"). </p>\n\n<p>Args: \n    c: int or string.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True or False.</p>\n</blockquote>\n\n<p>@public</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.__iter__", "modulename": "tbl.table", "qualname": "Table.__iter__", "kind": "function", "doc": "<p>Provides an iterator interface to allow looping over columns.\nThis allows,</p>\n\n<pre><code>for c in t: &lt;&lt;do whatever with column c&gt;&gt;\n</code></pre>\n\n<p>@public</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.__len__", "modulename": "tbl.table", "qualname": "Table.__len__", "kind": "function", "doc": "<p>Returns number of columns in this table. This allows,</p>\n\n<pre><code>ncolumns = len(t)\n</code></pre>\n\n<p>Similar to t.ncols().\n@public</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "tbl.table.Table.__getitem__", "modulename": "tbl.table", "qualname": "Table.__getitem__", "kind": "function", "doc": "<p>Returns column that corresponds to key, which can a string or int.\nThis allows,</p>\n\n<pre><code>    c = t[0] #or\n    c = t[\"Time\"]\n</code></pre>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>The column that corresponds to key or None if not present. </p>\n</blockquote>\n\n<p>@public</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">key</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.ttypes", "modulename": "tbl.ttypes", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tbl.ttypes.ALLOWED_TYPES", "modulename": "tbl.ttypes", "qualname": "ALLOWED_TYPES", "kind": "variable", "doc": "<p></p>\n", "default_value": "[&#x27;i&#x27;, &#x27;f&#x27;, &#x27;d&#x27;, &#x27;s&#x27;]"}, {"fullname": "tbl.ttypes.MAX_STRING_LEN_NUMPY", "modulename": "tbl.ttypes", "qualname": "MAX_STRING_LEN_NUMPY", "kind": "variable", "doc": "<p></p>\n", "default_value": "100"}, {"fullname": "tbl.ttypes.MAX_STRING_DATE_LEN_NUMPY", "modulename": "tbl.ttypes", "qualname": "MAX_STRING_DATE_LEN_NUMPY", "kind": "variable", "doc": "<p></p>\n", "default_value": "20"}, {"fullname": "tbl.ttypes.NUMPY_TYPE", "modulename": "tbl.ttypes", "qualname": "NUMPY_TYPE", "kind": "variable", "doc": "<p></p>\n", "default_value": "{&#x27;i&#x27;: &#x27;i8&#x27;, &#x27;f&#x27;: &#x27;f8&#x27;, &#x27;s&#x27;: &#x27;S100&#x27;, &#x27;d&#x27;: &#x27;S19&#x27;}"}, {"fullname": "tbl.ttypes.isTypeStr", "modulename": "tbl.ttypes", "qualname": "isTypeStr", "kind": "function", "doc": "<p>Returns True if string stype represents one of the allowed types.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stype</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "tbl.ttypes.getTypeConverter", "modulename": "tbl.ttypes", "qualname": "getTypeConverter", "kind": "function", "doc": "<p>Returns a function used to convert data from old type to new type. </p>\n\n<p>Args: <br />\n    old: type that must be converted.\n    new: new type.\n    fmt: format used to convert from old type to string. \n         Only required to convert date from string and to convert float and date to string.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>A tuple(f, fmt), where f: converter and  fmt is the format used to make conversion (string or None).</p>\n</blockquote>\n\n<p>NOTE: Only conversions from string to any type, and from any type to string are implemented.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">old</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">new</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">fmt</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.ttypes.isDateStr", "modulename": "tbl.ttypes", "qualname": "isDateStr", "kind": "function", "doc": "<p>Returns True if sstr can be interpreted as a date.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sstr:</strong>  string that may represent date.</li>\n<li><strong>fmt:</strong>  format for date, e.g. %d/%m/%Y.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sstr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">fmt</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">bool</span>:</span></span>", "funcdef": "def"}, {"fullname": "tbl.ttypes.getTypeStr", "modulename": "tbl.ttypes", "qualname": "getTypeStr", "kind": "function", "doc": "<p>Returns interpreted type for sstr.</p>\n\n<p>Types are checked in the following order: int, float, date, string.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sstr:</strong>  string that represents a single element of data.</li>\n<li><strong>fmt_date:</strong>  string that specifies format that should be used to parse a date, e.g. %d/%m/%Y.</li>\n</ul>\n\n<p>Returns: \n    A single character that specifies the type associated to the input string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sstr</span><span class=\"p\">:</span> <span class=\"nb\">str</span>, </span><span class=\"param\"><span class=\"n\">fmt_date</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "tbl.ttypes.getType", "modulename": "tbl.ttypes", "qualname": "getType", "kind": "function", "doc": "<p>Returns a single character that specifies the type of val.</p>\n\n<p>Args: \n    val: int, float, date or string.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "tbl.ttypes.getH5TypeStr", "modulename": "tbl.ttypes", "qualname": "getH5TypeStr", "kind": "function", "doc": "<p>Given a string that describes one of the types that can stored in a column, \nreturns the corresponding type that is used to store data in HDF5 files.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stype:</strong>  string, e.g. \"i\", \"f\", \"d\" or \"s\".</li>\n</ul>\n\n<p>NOTE: Dates are saved as strings.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stype</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "tbl.version", "modulename": "tbl.version", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "tbl.version.PYTABLE_VERSION", "modulename": "tbl.version", "qualname": "PYTABLE_VERSION", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;PyTable_v0.1.0&#x27;"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();